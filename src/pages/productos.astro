---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const products = [
  {
    id: 1,
    name: "Camisa Elegante Azul",
    price: 45000,
    image: "https://images.pexels.com/photos/1404819/pexels-photo-1404819.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Formal",
    rating: 5,
    description: "Perfecta para ocasiones especiales, fabricada con algodón premium"
  },
  {
    id: 2,
    name: "Camisa Casual Rayas",
    price: 35000,
    image: "https://images.pexels.com/photos/2071873/pexels-photo-2071873.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Casual",
    rating: 4,
    description: "Cómoda para el día a día, diseño de rayas clásico"
  },
  {
    id: 3,
    name: "Camisa Deportiva Verde",
    price: 40000,
    image: "https://images.pexels.com/photos/1741205/pexels-photo-1741205.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Deportiva",
    rating: 5,
    description: "Ideal para gatos activos, material transpirable"
  },
  {
    id: 4,
    name: "Camisa de Fiesta Dorada",
    price: 55000,
    image: "https://images.pexels.com/photos/1643456/pexels-photo-1643456.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Fiesta",
    rating: 5,
    description: "Brilla en cada celebración con este diseño exclusivo"
  },
  {
    id: 5,
    name: "Camisa Bohemia Flores",
    price: 42000,
    image: "https://images.pexels.com/photos/1404819/pexels-photo-1404819.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Casual",
    rating: 4,
    description: "Estilo bohemio con estampado floral delicado"
  },
  {
    id: 6,
    name: "Camisa Ejecutiva Negra",
    price: 50000,
    image: "https://images.pexels.com/photos/2071873/pexels-photo-2071873.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Formal",
    rating: 5,
    description: "Elegancia máxima para gatos ejecutivos"
  },
  {
    id: 7,
    name: "Camisa Hawaiana Tropical",
    price: 38000,
    image: "https://images.pexels.com/photos/1741205/pexels-photo-1741205.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Casual",
    rating: 4,
    description: "Estilo tropical para gatos aventureros"
  },
  {
    id: 8,
    name: "Camisa Gala Morada",
    price: 60000,
    image: "https://images.pexels.com/photos/1643456/pexels-photo-1643456.jpeg?auto=compress&cs=tinysrgb&w=400",
    category: "Fiesta",
    rating: 5,
    description: "Lujo y sofisticación para eventos especiales"
  }
];

const categories = ["Todas", "Casual", "Formal", "Deportiva", "Fiesta"];

function formatPrice(price: number): string {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0
  }).format(price);
}
---

<Layout title="Productos - Cat-Misas">
  <Header />
  
  <main class="products-page">
    <div class="container">
      <div class="page-header">
        <h1 class="page-title">Catálogo de Productos</h1>
        <p class="page-subtitle">Descubre toda nuestra colección de camisas para gatos</p>
      </div>

      <div class="filters">
        <div class="filter-group">
          <label for="category-filter">Categoría:</label>
          <select id="category-filter" class="filter-select">
            {categories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>
        
        <div class="filter-group">
          <label for="price-filter">Precio:</label>
          <select id="price-filter" class="filter-select">
            <option value="all">Todos</option>
            <option value="low">Menor a $40.000</option>
            <option value="mid">$40.000 - $50.000</option>
            <option value="high">Mayor a $50.000</option>
          </select>
        </div>
      </div>

      <div class="products-grid" id="products-grid">
        {products.map(product => (
          <div class="product-card" data-category={product.category} data-price={product.price}>
            <div class="product-image">
              <img src={product.image} alt={product.name} />
              <div class="product-badge">{product.category}</div>
              <div class="product-overlay">
                <button class="btn btn-primary" onclick="addToCart()">
                  Añadir al Carrito
                </button>
              </div>
            </div>
            <div class="product-info">
              <div class="product-rating">
                {Array.from({length: 5}, (_, i) => (
                  <span class={`star ${i < product.rating ? 'filled' : ''}`}>⭐</span>
                ))}
              </div>
              <h3 class="product-name">{product.name}</h3>
              <p class="product-description">{product.description}</p>
              <div class="product-price">{formatPrice(product.price)}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  .products-page {
    padding-top: 100px;
    min-height: 100vh;
    background: var(--light-gray);
  }

  .page-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .page-title {
    font-size: 3rem;
    font-weight: 700;
    color: var(--dark-gray);
    margin-bottom: 1rem;
  }

  .page-subtitle {
    font-size: 1.2rem;
    color: var(--primary-gray);
    max-width: 600px;
    margin: 0 auto;
  }

  .filters {
    display: flex;
    gap: 2rem;
    margin-bottom: 3rem;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group label {
    font-weight: 600;
    color: var(--dark-gray);
  }

  .filter-select {
    padding: 0.8rem;
    border: 2px solid #E5E7EB;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--primary-orange);
  }

  .products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .product-card {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .product-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .product-image {
    position: relative;
    height: 250px;
    overflow: hidden;
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .product-card:hover .product-image img {
    transform: scale(1.05);
  }

  .product-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    background: var(--accent-purple);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  .product-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-card:hover .product-overlay {
    opacity: 1;
  }

  .product-info {
    padding: 1.5rem;
  }

  .product-rating {
    display: flex;
    gap: 0.2rem;
    margin-bottom: 0.5rem;
  }

  .star {
    font-size: 1rem;
    opacity: 0.3;
  }

  .star.filled {
    opacity: 1;
  }

  .product-name {
    font-size: 1.3rem;
    font-weight: 600;
    color: var(--dark-gray);
    margin-bottom: 0.5rem;
  }

  .product-description {
    color: var(--primary-gray);
    font-size: 0.9rem;
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .product-price {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-orange);
  }

  .product-card.hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .page-title {
      font-size: 2.5rem;
    }
    
    .filters {
      flex-direction: column;
      gap: 1rem;
    }
    
    .products-grid {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
    }
  }
</style>

<script>
  // Filter functionality
  const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
  const priceFilter = document.getElementById('price-filter') as HTMLSelectElement;
  const productsGrid = document.getElementById('products-grid') as HTMLElement;

  function filterProducts() {
    const categoryValue = categoryFilter.value;
    const priceValue = priceFilter.value;
    const products = productsGrid.querySelectorAll('.product-card');

    products.forEach(product => {
      const productElement = product as HTMLElement;
      const productCategory = productElement.dataset.category;
      const productPrice = parseInt(productElement.dataset.price || '0');
      
      let showProduct = true;

      // Category filter
      if (categoryValue !== 'Todas' && productCategory !== categoryValue) {
        showProduct = false;
      }

      // Price filter
      if (priceValue !== 'all') {
        if (priceValue === 'low' && productPrice >= 40000) {
          showProduct = false;
        } else if (priceValue === 'mid' && (productPrice < 40000 || productPrice > 50000)) {
          showProduct = false;
        } else if (priceValue === 'high' && productPrice <= 50000) {
          showProduct = false;
        }
      }

      if (showProduct) {
        productElement.classList.remove('hidden');
      } else {
        productElement.classList.add('hidden');
      }
    });
  }

  categoryFilter.addEventListener('change', filterProducts);
  priceFilter.addEventListener('change', filterProducts);
</script>